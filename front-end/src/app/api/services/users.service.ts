/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { userControllerCreateUser } from '../fn/users/user-controller-create-user';
import { UserControllerCreateUser$Params } from '../fn/users/user-controller-create-user';
import { userControllerDeleteUser } from '../fn/users/user-controller-delete-user';
import { UserControllerDeleteUser$Params } from '../fn/users/user-controller-delete-user';
import { userControllerGetAllUsers } from '../fn/users/user-controller-get-all-users';
import { UserControllerGetAllUsers$Params } from '../fn/users/user-controller-get-all-users';
import { userControllerGetUserById } from '../fn/users/user-controller-get-user-by-id';
import { UserControllerGetUserById$Params } from '../fn/users/user-controller-get-user-by-id';
import { userControllerUpdateUser } from '../fn/users/user-controller-update-user';
import { UserControllerUpdateUser$Params } from '../fn/users/user-controller-update-user';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userControllerGetAllUsers()` */
  static readonly UserControllerGetAllUsersPath = '/api/users';

  /**
   * Get all users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerGetAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetAllUsers$Response(params?: UserControllerGetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userControllerGetAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerGetAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetAllUsers(params?: UserControllerGetAllUsers$Params, context?: HttpContext): Observable<void> {
    return this.userControllerGetAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `userControllerCreateUser()` */
  static readonly UserControllerCreateUserPath = '/api/users';

  /**
   * Create a new user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerCreateUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userControllerCreateUser$Response(params: UserControllerCreateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userControllerCreateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerCreateUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userControllerCreateUser(params: UserControllerCreateUser$Params, context?: HttpContext): Observable<void> {
    return this.userControllerCreateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `userControllerGetUserById()` */
  static readonly UserControllerGetUserByIdPath = '/api/users/{id}';

  /**
   * Get user by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerGetUserById()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetUserById$Response(params: UserControllerGetUserById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userControllerGetUserById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerGetUserById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerGetUserById(params: UserControllerGetUserById$Params, context?: HttpContext): Observable<void> {
    return this.userControllerGetUserById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `userControllerUpdateUser()` */
  static readonly UserControllerUpdateUserPath = '/api/users/{id}';

  /**
   * Update user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerUpdateUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerUpdateUser$Response(params: UserControllerUpdateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userControllerUpdateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerUpdateUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerUpdateUser(params: UserControllerUpdateUser$Params, context?: HttpContext): Observable<void> {
    return this.userControllerUpdateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `userControllerDeleteUser()` */
  static readonly UserControllerDeleteUserPath = '/api/users/{id}';

  /**
   * Delete user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userControllerDeleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerDeleteUser$Response(params: UserControllerDeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return userControllerDeleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userControllerDeleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userControllerDeleteUser(params: UserControllerDeleteUser$Params, context?: HttpContext): Observable<void> {
    return this.userControllerDeleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
