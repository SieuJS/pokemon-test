/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { pokemonFavoriteControllerAddFavorite } from '../fn/pokemon-favorite/pokemon-favorite-controller-add-favorite';
import { PokemonFavoriteControllerAddFavorite$Params } from '../fn/pokemon-favorite/pokemon-favorite-controller-add-favorite';
import { pokemonFavoriteControllerGetFavorites } from '../fn/pokemon-favorite/pokemon-favorite-controller-get-favorites';
import { PokemonFavoriteControllerGetFavorites$Params } from '../fn/pokemon-favorite/pokemon-favorite-controller-get-favorites';
import { pokemonFavoriteControllerRemoveFavorite } from '../fn/pokemon-favorite/pokemon-favorite-controller-remove-favorite';
import { PokemonFavoriteControllerRemoveFavorite$Params } from '../fn/pokemon-favorite/pokemon-favorite-controller-remove-favorite';
import { PokemonFavoriteDto } from '../models/pokemon-favorite-dto';

@Injectable({ providedIn: 'root' })
export class PokemonFavoriteService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `pokemonFavoriteControllerAddFavorite()` */
  static readonly PokemonFavoriteControllerAddFavoritePath = '/api/pokemon-favorite/{pokemonId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pokemonFavoriteControllerAddFavorite()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pokemonFavoriteControllerAddFavorite$Response(params: PokemonFavoriteControllerAddFavorite$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return pokemonFavoriteControllerAddFavorite(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pokemonFavoriteControllerAddFavorite$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pokemonFavoriteControllerAddFavorite(params: PokemonFavoriteControllerAddFavorite$Params, context?: HttpContext): Observable<void> {
    return this.pokemonFavoriteControllerAddFavorite$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `pokemonFavoriteControllerRemoveFavorite()` */
  static readonly PokemonFavoriteControllerRemoveFavoritePath = '/api/pokemon-favorite/{pokemonId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pokemonFavoriteControllerRemoveFavorite()` instead.
   *
   * This method doesn't expect any request body.
   */
  pokemonFavoriteControllerRemoveFavorite$Response(params: PokemonFavoriteControllerRemoveFavorite$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return pokemonFavoriteControllerRemoveFavorite(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pokemonFavoriteControllerRemoveFavorite$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  pokemonFavoriteControllerRemoveFavorite(params: PokemonFavoriteControllerRemoveFavorite$Params, context?: HttpContext): Observable<void> {
    return this.pokemonFavoriteControllerRemoveFavorite$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `pokemonFavoriteControllerGetFavorites()` */
  static readonly PokemonFavoriteControllerGetFavoritesPath = '/api/pokemon-favorite';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pokemonFavoriteControllerGetFavorites()` instead.
   *
   * This method doesn't expect any request body.
   */
  pokemonFavoriteControllerGetFavorites$Response(params?: PokemonFavoriteControllerGetFavorites$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PokemonFavoriteDto>>> {
    return pokemonFavoriteControllerGetFavorites(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pokemonFavoriteControllerGetFavorites$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  pokemonFavoriteControllerGetFavorites(params?: PokemonFavoriteControllerGetFavorites$Params, context?: HttpContext): Observable<Array<PokemonFavoriteDto>> {
    return this.pokemonFavoriteControllerGetFavorites$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PokemonFavoriteDto>>): Array<PokemonFavoriteDto> => r.body)
    );
  }

}
