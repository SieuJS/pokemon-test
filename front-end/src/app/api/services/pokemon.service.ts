/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { pokemonControllerGetPokemonList } from '../fn/pokemon/pokemon-controller-get-pokemon-list';
import { PokemonControllerGetPokemonList$Params } from '../fn/pokemon/pokemon-controller-get-pokemon-list';
import { pokemonControllerImportPokemonCsv } from '../fn/pokemon/pokemon-controller-import-pokemon-csv';
import { PokemonControllerImportPokemonCsv$Params } from '../fn/pokemon/pokemon-controller-import-pokemon-csv';
import { PokemonListDto } from '../models/pokemon-list-dto';

@Injectable({ providedIn: 'root' })
export class PokemonService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `pokemonControllerGetPokemonList()` */
  static readonly PokemonControllerGetPokemonListPath = '/api/pokemon/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pokemonControllerGetPokemonList()` instead.
   *
   * This method doesn't expect any request body.
   */
  pokemonControllerGetPokemonList$Response(params?: PokemonControllerGetPokemonList$Params, context?: HttpContext): Observable<StrictHttpResponse<PokemonListDto>> {
    return pokemonControllerGetPokemonList(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pokemonControllerGetPokemonList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  pokemonControllerGetPokemonList(params?: PokemonControllerGetPokemonList$Params, context?: HttpContext): Observable<PokemonListDto> {
    return this.pokemonControllerGetPokemonList$Response(params, context).pipe(
      map((r: StrictHttpResponse<PokemonListDto>): PokemonListDto => r.body)
    );
  }

  /** Path part for operation `pokemonControllerImportPokemonCsv()` */
  static readonly PokemonControllerImportPokemonCsvPath = '/api/pokemon/import';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pokemonControllerImportPokemonCsv()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  pokemonControllerImportPokemonCsv$Response(params: PokemonControllerImportPokemonCsv$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return pokemonControllerImportPokemonCsv(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pokemonControllerImportPokemonCsv$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  pokemonControllerImportPokemonCsv(params: PokemonControllerImportPokemonCsv$Params, context?: HttpContext): Observable<void> {
    return this.pokemonControllerImportPokemonCsv$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
