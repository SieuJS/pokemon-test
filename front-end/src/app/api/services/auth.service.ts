/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AccessTokenDto } from '../models/access-token-dto';
import { authControllerLogin } from '../fn/auth/auth-controller-login';
import { AuthControllerLogin$Params } from '../fn/auth/auth-controller-login';
import { authControllerRegister } from '../fn/auth/auth-controller-register';
import { AuthControllerRegister$Params } from '../fn/auth/auth-controller-register';
import { authControllerValidate } from '../fn/auth/auth-controller-validate';
import { AuthControllerValidate$Params } from '../fn/auth/auth-controller-validate';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authControllerLogin()` */
  static readonly AuthControllerLoginPath = '/api/auth/login';

  /**
   * User login.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerLogin()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerLogin$Response(params: AuthControllerLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<AccessTokenDto>> {
    return authControllerLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * User login.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerLogin$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerLogin(params: AuthControllerLogin$Params, context?: HttpContext): Observable<AccessTokenDto> {
    return this.authControllerLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<AccessTokenDto>): AccessTokenDto => r.body)
    );
  }

  /** Path part for operation `authControllerRegister()` */
  static readonly AuthControllerRegisterPath = '/api/auth/register';

  /**
   * User registration.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerRegister()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerRegister$Response(params: AuthControllerRegister$Params, context?: HttpContext): Observable<StrictHttpResponse<AccessTokenDto>> {
    return authControllerRegister(this.http, this.rootUrl, params, context);
  }

  /**
   * User registration.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerRegister$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authControllerRegister(params: AuthControllerRegister$Params, context?: HttpContext): Observable<AccessTokenDto> {
    return this.authControllerRegister$Response(params, context).pipe(
      map((r: StrictHttpResponse<AccessTokenDto>): AccessTokenDto => r.body)
    );
  }

  /** Path part for operation `authControllerValidate()` */
  static readonly AuthControllerValidatePath = '/api/auth/validate';

  /**
   * Validate user token.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authControllerValidate()` instead.
   *
   * This method doesn't expect any request body.
   */
  authControllerValidate$Response(params?: AuthControllerValidate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authControllerValidate(this.http, this.rootUrl, params, context);
  }

  /**
   * Validate user token.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authControllerValidate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authControllerValidate(params?: AuthControllerValidate$Params, context?: HttpContext): Observable<void> {
    return this.authControllerValidate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
